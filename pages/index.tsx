import type { GetServerSideProps, NextPage } from 'next';
import Head from 'next/head';
import axios from 'axios';
import Header from '../components/common/Header';
import Container from '../components/common/Container';
import List from '../components/common/List';
import Task from '../components/tasks/Task';
import { TaskType } from '../types/task/TaskType';
import { useEffect, useState } from 'react';
import { ApiModelResponse } from '../types/common/ApiModelResponse';
import { CreateTaskType } from '../types/task/CreateTaskType';
import Alert from '../components/common/Alert';
import { AlertType } from '../types/task/AlertType';

const Home: NextPage = () => {
  // const [url, setUrl] = useState<string>('https://e-task-list-backend.herokuapp.com/tasks')
  // const url = 'http://localhost:5000/tasks'
  const url = 'https://e-task-list-backend.herokuapp.com/tasks'
  const [tasks, setTasks] = useState<TaskType[]>([])
  const [alert, setAlert] = useState<AlertType>({ msg: '', type: 'success', show: false })

  const getTaskList = async () => {
    console.log('getTaskList')
    try {
      const { data } = await axios.get(url);
      setTasks([...data.data])
    } catch (err) {
      setAlert({ msg: "Erro ao listar as tasks.", type: 'error', show: true })
      console.error(err)
    }
  }

  const saveTask = async (task: CreateTaskType): Promise<void> => {
    try {
      const res = await axios.post(url, task)
      await getTaskList()
      setAlert({ msg: "A task foi salva com sucesso.", type: 'success', show: true })
    } catch (err) {
      console.error(err)
      setAlert({ msg: "Erro ao salvar a task.", type: 'error', show: true })
    }
  }

  const checkTask = async (id?: string): Promise<void> => {
    const toggleTaskChecked = () => {
      const taskIndex = tasks.findIndex(task => task.id == id)
      tasks[taskIndex].checked = !tasks[taskIndex].checked
      setTasks([...tasks])
    }

    toggleTaskChecked()
    try {
      await axios.put(`${url}/check/${id}`)
    } catch (err) {
      toggleTaskChecked()
      console.error(err)
      setAlert({ msg: "Erro ao alterar a task.", type: 'error', show: true })
    }
  }

  const deleteTask = async (id?: string) => {
    try {
      const res = await axios.delete(`${url}/${id}`)
      console.log(res)
      await getTaskList()
    } catch (err) {
      console.error(err)
      setAlert({ msg: "Erro ao deletar a task.", type: 'error', show: true })
    }
  }

  useEffect(() => {
    const fetch = async () => {
      await getTaskList()
    }
    // const url = window.location.href.includes('localhost')
    //   ? 'http://localhost:3333/tasks'
    //   : 'https://e-task-list-backend.herokuapp.com/tasks'

    // setUrl(url)
    fetch()
  }, [])

  return (
    <>
      <Head>
        <title>Task List</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="manifest" href="/manifest.json" />
        <meta httpEquiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header onSave={saveTask} />
      <Alert show={alert.show} msg={alert.msg} type={alert.type} toggleAlert={() => setAlert({ ...alert, show: false })} />
      <Container>
        <List>
          {tasks.map((task, i) => <Task task={task} onCheck={checkTask} onDelete={deleteTask} key={i} />)}
        </List>
      </Container>
    </>
  );
};

export default Home;
